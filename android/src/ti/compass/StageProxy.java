/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.compass;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiDimension;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.util.TiLocationHelper;
import org.appcelerator.titanium.util.TiSensorHelper;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;

// This proxy can be created by calling TiCompass.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = TiCompassModule.class)
public class StageProxy extends TiViewProxy {
    // Standard Debugging variables
    private static final String LCAT = "ExampleProxy";
    private static final boolean DBG = TiConfig.LOGD;
    TiUIView view;
    TiUIView customView;
    LocationManager lm;
    Location myLocation;
    Location destinationLoc;
    SensorManager sensorManager;
    private SensorEventListener eventListenerOrientation;
    private SensorEventListener eventListenerAccelerometer;

    // Constructor
    public StageProxy() {
        super();
    }

    protected ExampleView getView() {
        return (ExampleView) getOrCreateView();
    }

    @Override
    public TiUIView createView(Activity activity) {
        view = new ExampleView(this);
        view.getLayoutParams().autoFillsHeight = true;
        view.getLayoutParams().autoFillsWidth = true;
        return view;
    }

    // Handle creation options
    @Override
    public void handleCreationDict(KrollDict options) {
        super.handleCreationDict(options);

        if (options.containsKey("message")) {
            Log.d(LCAT, "example created with message: " + options.get("message"));
        }
    }

    @Kroll.method
    public void createInfoBox(KrollDict kd) {
        // add a view
        CustomViewProxy customViewProxy = new CustomViewProxy();
        customView = customViewProxy.getOrCreateView();
        customView.getLayoutParams().optionLeft = TiConvert.toTiDimension("100", 100);
        customView.getLayoutParams().optionTop = TiConvert.toTiDimension("100", 100);
        customView.getLayoutParams().optionWidth = TiConvert.toTiDimension("100", 100);
        customView.getLayoutParams().optionHeight = TiConvert.toTiDimension("100", 100);
        view.add(customView);
    }
    
    // Methods
    @SuppressLint("MissingPermission")
    @Kroll.method
    public void init() {

        // demo data for AR location
        destinationLoc = new Location("service Provider");
        destinationLoc.setLatitude(48.135124);
        destinationLoc.setLongitude(11.581981);

        // GPS - get user location
        lm = TiLocationHelper.getLocationManager();
        myLocation = lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);
        LocationListener locationListener = new LocationListener() {
            @Override
            public void onLocationChanged(Location location) {
                // GPS position available
                myLocation = location;
                double latUser = location.getLatitude();
                double lonUser = location.getLongitude();
            }
        };
        lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);

        // Sensor - get orientation
        sensorManager = TiSensorHelper.getSensorManager();
        eventListenerOrientation = new SensorEventListener() {
            @Override
            public void onSensorChanged(SensorEvent event) {
                // sensor data available
                float[] values = event.values;
                float x = values[0];
                float y = values[1];
                float z = values[2];

                float direction = (x + 90) % 360;
                float roll = z;
            }

            @Override
            public void onAccuracyChanged(Sensor sensor, int accuracy) {
            }
        };
        sensorManager.registerListener(eventListenerOrientation, sensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION), SensorManager.SENSOR_DELAY_GAME);
        eventListenerAccelerometer = new SensorEventListener() {
            @Override
            public void onSensorChanged(SensorEvent event) {
                // orientation data available
                float[] values = event.values;
                float x = values[0];
                float y = values[1];
                float z = values[2];
                Log.i(LCAT, x + " " + y + " " + z);
            }

            @Override
            public void onAccuracyChanged(Sensor sensor, int accuracy) {
            }
        };
        sensorManager.registerListener(eventListenerAccelerometer, sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER), SensorManager.SENSOR_DELAY_GAME);
    }

    private class ExampleView extends TiUIView {
        public ExampleView(TiViewProxy proxy) {
            super(proxy);
            LayoutArrangement arrangement = LayoutArrangement.DEFAULT;
            setNativeView(new TiCompositeLayout(proxy.getActivity(), arrangement));
        }

        @Override
        public void processProperties(KrollDict d) {
            super.processProperties(d);
        }
    }
}
